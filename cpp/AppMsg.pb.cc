// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppMsg.proto

#include "AppMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_abnormal_param_AppMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppMsg_channel_info_AppMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_item_id_AppMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_platform_id_AppMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_station_id_AppMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_AppMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_turnout_id_AppMsg_2eproto;
namespace proto {
class AppMsg_device_addDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_device_add> _instance;
} _AppMsg_device_add_default_instance_;
class AppMsg_server_addDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_server_add> _instance;
} _AppMsg_server_add_default_instance_;
class AppMsg_platform_idDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_platform_id> _instance;
} _AppMsg_platform_id_default_instance_;
class AppMsg_station_idDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_station_id> _instance;
} _AppMsg_station_id_default_instance_;
class AppMsg_turnout_idDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_turnout_id> _instance;
} _AppMsg_turnout_id_default_instance_;
class AppMsg_item_idDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_item_id> _instance;
} _AppMsg_item_id_default_instance_;
class AppMsg_sample_frequencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_sample_frequency> _instance;
} _AppMsg_sample_frequency_default_instance_;
class AppMsg_abnormal_paramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_abnormal_param> _instance;
} _AppMsg_abnormal_param_default_instance_;
class AppMsg_pass_paramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_pass_param> _instance;
} _AppMsg_pass_param_default_instance_;
class AppMsg_sample_card_numDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_sample_card_num> _instance;
} _AppMsg_sample_card_num_default_instance_;
class AppMsg_file_cache_enableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_file_cache_enable> _instance;
} _AppMsg_file_cache_enable_default_instance_;
class AppMsg_adc_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_adc_data> _instance;
} _AppMsg_adc_data_default_instance_;
class AppMsg_channel_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg_channel_info> _instance;
} _AppMsg_channel_info_default_instance_;
class AppMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppMsg> _instance;
} _AppMsg_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_AppMsg_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_default_instance_;
    new (ptr) ::proto::AppMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_abnormal_param_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_abnormal_param_default_instance_;
    new (ptr) ::proto::AppMsg_abnormal_param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_abnormal_param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_abnormal_param_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_abnormal_param_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_adc_data_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_adc_data_default_instance_;
    new (ptr) ::proto::AppMsg_adc_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_adc_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AppMsg_adc_data_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_AppMsg_adc_data_AppMsg_2eproto}, {
      &scc_info_AppMsg_channel_info_AppMsg_2eproto.base,
      &scc_info_AppMsg_platform_id_AppMsg_2eproto.base,
      &scc_info_AppMsg_station_id_AppMsg_2eproto.base,
      &scc_info_AppMsg_turnout_id_AppMsg_2eproto.base,
      &scc_info_AppMsg_item_id_AppMsg_2eproto.base,}};

static void InitDefaultsscc_info_AppMsg_channel_info_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_channel_info_default_instance_;
    new (ptr) ::proto::AppMsg_channel_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_channel_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppMsg_channel_info_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AppMsg_channel_info_AppMsg_2eproto}, {
      &scc_info_AppMsg_abnormal_param_AppMsg_2eproto.base,}};

static void InitDefaultsscc_info_AppMsg_device_add_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_device_add_default_instance_;
    new (ptr) ::proto::AppMsg_device_add();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_device_add::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_device_add_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_device_add_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_file_cache_enable_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_file_cache_enable_default_instance_;
    new (ptr) ::proto::AppMsg_file_cache_enable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_file_cache_enable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_file_cache_enable_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_file_cache_enable_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_item_id_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_item_id_default_instance_;
    new (ptr) ::proto::AppMsg_item_id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_item_id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_item_id_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_item_id_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_pass_param_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_pass_param_default_instance_;
    new (ptr) ::proto::AppMsg_pass_param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_pass_param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_pass_param_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_pass_param_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_platform_id_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_platform_id_default_instance_;
    new (ptr) ::proto::AppMsg_platform_id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_platform_id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_platform_id_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_platform_id_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_sample_card_num_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_sample_card_num_default_instance_;
    new (ptr) ::proto::AppMsg_sample_card_num();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_sample_card_num::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_sample_card_num_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_sample_card_num_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_sample_frequency_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_sample_frequency_default_instance_;
    new (ptr) ::proto::AppMsg_sample_frequency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_sample_frequency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_sample_frequency_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_sample_frequency_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_server_add_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_server_add_default_instance_;
    new (ptr) ::proto::AppMsg_server_add();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_server_add::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_server_add_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_server_add_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_station_id_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_station_id_default_instance_;
    new (ptr) ::proto::AppMsg_station_id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_station_id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_station_id_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_station_id_AppMsg_2eproto}, {}};

static void InitDefaultsscc_info_AppMsg_turnout_id_AppMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AppMsg_turnout_id_default_instance_;
    new (ptr) ::proto::AppMsg_turnout_id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AppMsg_turnout_id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppMsg_turnout_id_AppMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppMsg_turnout_id_AppMsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AppMsg_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_AppMsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AppMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AppMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_device_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_device_add, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_device_add, netmask_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_device_add, gateway_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_server_add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_server_add, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_server_add, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_platform_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_platform_id, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_station_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_station_id, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_turnout_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_turnout_id, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_item_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_item_id, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_sample_frequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_sample_frequency, frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_abnormal_param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_abnormal_param, level_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_abnormal_param, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_pass_param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_pass_param, threshold_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_pass_param, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_sample_card_num, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_sample_card_num, num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_file_cache_enable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_file_cache_enable, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, time_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, sample_card_num_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, sample_frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, sample_number_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, data_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, channel_info_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, platform_id_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, station_id_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, turnout_id_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_adc_data, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, channel_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, offset_zero_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, offset_max_vol_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, offset_max_vol_ad_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, fault_voltage_),
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg_channel_info, abnormal_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::AppMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::AppMsg_device_add)},
  { 8, -1, sizeof(::proto::AppMsg_server_add)},
  { 15, -1, sizeof(::proto::AppMsg_platform_id)},
  { 21, -1, sizeof(::proto::AppMsg_station_id)},
  { 27, -1, sizeof(::proto::AppMsg_turnout_id)},
  { 33, -1, sizeof(::proto::AppMsg_item_id)},
  { 39, -1, sizeof(::proto::AppMsg_sample_frequency)},
  { 45, -1, sizeof(::proto::AppMsg_abnormal_param)},
  { 52, -1, sizeof(::proto::AppMsg_pass_param)},
  { 59, -1, sizeof(::proto::AppMsg_sample_card_num)},
  { 65, -1, sizeof(::proto::AppMsg_file_cache_enable)},
  { 71, -1, sizeof(::proto::AppMsg_adc_data)},
  { 86, -1, sizeof(::proto::AppMsg_channel_info)},
  { 97, -1, sizeof(::proto::AppMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_device_add_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_server_add_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_platform_id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_station_id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_turnout_id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_item_id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_sample_frequency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_abnormal_param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_pass_param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_sample_card_num_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_file_cache_enable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_adc_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_channel_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppMsg_default_instance_),
};

const char descriptor_table_protodef_AppMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014AppMsg.proto\022\005proto\"\241\014\n\006AppMsg\032:\n\ndevi"
  "ce_add\022\n\n\002ip\030\001 \001(\t\022\017\n\007netmask\030\002 \001(\t\022\017\n\007g"
  "ateway\030\003 \001(\t\032&\n\nserver_add\022\n\n\002ip\030\001 \001(\t\022\014"
  "\n\004port\030\002 \001(\r\032\031\n\013platform_id\022\n\n\002id\030\001 \001(\t\032"
  "\030\n\nstation_id\022\n\n\002id\030\001 \001(\t\032\030\n\nturnout_id\022"
  "\n\n\002id\030\001 \001(\t\032\025\n\007item_id\022\n\n\002id\030\001 \001(\t\032%\n\020sa"
  "mple_frequency\022\021\n\tfrequency\030\001 \001(\r\0321\n\016abn"
  "ormal_param\022\r\n\005level\030\001 \001(\r\022\020\n\010duration\030\002"
  " \001(\r\0321\n\npass_param\022\021\n\tthreshold\030\001 \001(\r\022\020\n"
  "\010duration\030\002 \001(\r\032\036\n\017sample_card_num\022\013\n\003nu"
  "m\030\001 \001(\r\032#\n\021file_cache_enable\022\016\n\006enable\030\001"
  " \001(\010\032\326\002\n\010adc_data\022\014\n\004time\030\001 \001(\004\022\027\n\017sampl"
  "e_card_num\030\002 \001(\r\022\030\n\020sample_frequency\030\003 \001"
  "(\r\022\025\n\rsample_number\030\004 \001(\r\022\014\n\004data\030\005 \003(\014\022"
  "0\n\014channel_info\030\006 \003(\0132\032.proto.AppMsg.cha"
  "nnel_info\022.\n\013platform_id\030\007 \001(\0132\031.proto.A"
  "ppMsg.platform_id\022,\n\nstation_id\030\010 \001(\0132\030."
  "proto.AppMsg.station_id\022,\n\nturnout_id\030\t "
  "\001(\0132\030.proto.AppMsg.turnout_id\022&\n\007item_id"
  "\030\n \001(\0132\025.proto.AppMsg.item_id\032\264\001\n\014channe"
  "l_info\022\017\n\007channel\030\001 \001(\r\022\023\n\013offset_zero\030\002"
  " \001(\r\022\026\n\016offset_max_vol\030\003 \001(\r\022\031\n\021offset_m"
  "ax_vol_ad\030\004 \001(\r\022\025\n\rfault_voltage\030\005 \001(\r\0224"
  "\n\016abnormal_param\030\006 \001(\0132\034.proto.AppMsg.ab"
  "normal_param\"\352\004\n\003Cmd\022\010\n\004NONE\020\000\022\014\n\010RESERV"
  "ED\020\n\022\022\n\016set_device_add\020\013\022\022\n\016get_device_a"
  "dd\020\014\022\022\n\016set_server_add\020\r\022\022\n\016get_server_a"
  "dd\020\016\022\023\n\017set_platform_id\020\017\022\023\n\017get_platfor"
  "m_id\020\020\022\022\n\016set_station_id\020\021\022\022\n\016get_statio"
  "n_id\020\022\022\022\n\016set_turnout_id\020\023\022\022\n\016get_turnou"
  "t_id\020\024\022\017\n\013set_item_id\020\025\022\017\n\013get_item_id\020\026"
  "\022\030\n\024set_sample_frequency\020\031\022\030\n\024get_sample"
  "_frequency\020\032\022\022\n\016set_pass_param\020%\022\022\n\016get_"
  "pass_param\020&\022\027\n\023set_sample_card_num\020)\022\027\n"
  "\023get_sample_card_num\020*\022\024\n\020capture_adc_da"
  "ta\020+\022\024\n\020set_channel_info\020.\022\024\n\020get_channe"
  "l_info\020/\022\031\n\025set_file_cache_enable\0201\022\031\n\025g"
  "et_file_cache_enable\0202\022\022\n\rauto_adc_data\020"
  "\350\007\022\016\n\terror_msg\020\351\007\022\031\n\024ready_received_cac"
  "he\020\352\007\022\032\n\025pass_duration_trigger\020\353\007b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AppMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AppMsg_2eproto_sccs[14] = {
  &scc_info_AppMsg_AppMsg_2eproto.base,
  &scc_info_AppMsg_abnormal_param_AppMsg_2eproto.base,
  &scc_info_AppMsg_adc_data_AppMsg_2eproto.base,
  &scc_info_AppMsg_channel_info_AppMsg_2eproto.base,
  &scc_info_AppMsg_device_add_AppMsg_2eproto.base,
  &scc_info_AppMsg_file_cache_enable_AppMsg_2eproto.base,
  &scc_info_AppMsg_item_id_AppMsg_2eproto.base,
  &scc_info_AppMsg_pass_param_AppMsg_2eproto.base,
  &scc_info_AppMsg_platform_id_AppMsg_2eproto.base,
  &scc_info_AppMsg_sample_card_num_AppMsg_2eproto.base,
  &scc_info_AppMsg_sample_frequency_AppMsg_2eproto.base,
  &scc_info_AppMsg_server_add_AppMsg_2eproto.base,
  &scc_info_AppMsg_station_id_AppMsg_2eproto.base,
  &scc_info_AppMsg_turnout_id_AppMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AppMsg_2eproto_once;
static bool descriptor_table_AppMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AppMsg_2eproto = {
  &descriptor_table_AppMsg_2eproto_initialized, descriptor_table_protodef_AppMsg_2eproto, "AppMsg.proto", 1601,
  &descriptor_table_AppMsg_2eproto_once, descriptor_table_AppMsg_2eproto_sccs, descriptor_table_AppMsg_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_AppMsg_2eproto::offsets,
  file_level_metadata_AppMsg_2eproto, 14, file_level_enum_descriptors_AppMsg_2eproto, file_level_service_descriptors_AppMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AppMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AppMsg_2eproto), true);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppMsg_Cmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AppMsg_2eproto);
  return file_level_enum_descriptors_AppMsg_2eproto[0];
}
bool AppMsg_Cmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 37:
    case 38:
    case 41:
    case 42:
    case 43:
    case 46:
    case 47:
    case 49:
    case 50:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AppMsg_Cmd AppMsg::NONE;
constexpr AppMsg_Cmd AppMsg::RESERVED;
constexpr AppMsg_Cmd AppMsg::set_device_add;
constexpr AppMsg_Cmd AppMsg::get_device_add;
constexpr AppMsg_Cmd AppMsg::set_server_add;
constexpr AppMsg_Cmd AppMsg::get_server_add;
constexpr AppMsg_Cmd AppMsg::set_platform_id;
constexpr AppMsg_Cmd AppMsg::get_platform_id;
constexpr AppMsg_Cmd AppMsg::set_station_id;
constexpr AppMsg_Cmd AppMsg::get_station_id;
constexpr AppMsg_Cmd AppMsg::set_turnout_id;
constexpr AppMsg_Cmd AppMsg::get_turnout_id;
constexpr AppMsg_Cmd AppMsg::set_item_id;
constexpr AppMsg_Cmd AppMsg::get_item_id;
constexpr AppMsg_Cmd AppMsg::set_sample_frequency;
constexpr AppMsg_Cmd AppMsg::get_sample_frequency;
constexpr AppMsg_Cmd AppMsg::set_pass_param;
constexpr AppMsg_Cmd AppMsg::get_pass_param;
constexpr AppMsg_Cmd AppMsg::set_sample_card_num;
constexpr AppMsg_Cmd AppMsg::get_sample_card_num;
constexpr AppMsg_Cmd AppMsg::capture_adc_data;
constexpr AppMsg_Cmd AppMsg::set_channel_info;
constexpr AppMsg_Cmd AppMsg::get_channel_info;
constexpr AppMsg_Cmd AppMsg::set_file_cache_enable;
constexpr AppMsg_Cmd AppMsg::get_file_cache_enable;
constexpr AppMsg_Cmd AppMsg::auto_adc_data;
constexpr AppMsg_Cmd AppMsg::error_msg;
constexpr AppMsg_Cmd AppMsg::ready_received_cache;
constexpr AppMsg_Cmd AppMsg::pass_duration_trigger;
constexpr AppMsg_Cmd AppMsg::Cmd_MIN;
constexpr AppMsg_Cmd AppMsg::Cmd_MAX;
constexpr int AppMsg::Cmd_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AppMsg_device_add::InitAsDefaultInstance() {
}
class AppMsg_device_add::_Internal {
 public:
};

AppMsg_device_add::AppMsg_device_add()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.device_add)
}
AppMsg_device_add::AppMsg_device_add(const AppMsg_device_add& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.netmask().empty()) {
    netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.gateway().empty()) {
    gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.device_add)
}

void AppMsg_device_add::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_device_add_AppMsg_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppMsg_device_add::~AppMsg_device_add() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.device_add)
  SharedDtor();
}

void AppMsg_device_add::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_device_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_device_add& AppMsg_device_add::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_device_add_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_device_add::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.device_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_device_add::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "proto.AppMsg.device_add.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string netmask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_netmask(), ptr, ctx, "proto.AppMsg.device_add.netmask");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gateway = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gateway(), ptr, ctx, "proto.AppMsg.device_add.gateway");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_device_add::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.device_add)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.device_add.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string netmask = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_netmask()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->netmask().data(), static_cast<int>(this->netmask().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.device_add.netmask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gateway = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gateway().data(), static_cast<int>(this->gateway().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.device_add.gateway"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.device_add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.device_add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_device_add::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.device_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // string netmask = 2;
  if (this->netmask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->netmask().data(), static_cast<int>(this->netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.netmask");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->netmask(), output);
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), static_cast<int>(this->gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.gateway");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gateway(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.device_add)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_device_add::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.device_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // string netmask = 2;
  if (this->netmask().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->netmask().data(), static_cast<int>(this->netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.netmask");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->netmask(), target);
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gateway().data(), static_cast<int>(this->gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.device_add.gateway");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->gateway(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.device_add)
  return target;
}

size_t AppMsg_device_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.device_add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string netmask = 2;
  if (this->netmask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->netmask());
  }

  // string gateway = 3;
  if (this->gateway().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gateway());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_device_add::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.device_add)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_device_add* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_device_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.device_add)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.device_add)
    MergeFrom(*source);
  }
}

void AppMsg_device_add::MergeFrom(const AppMsg_device_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.device_add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.netmask().size() > 0) {

    netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  if (from.gateway().size() > 0) {

    gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
}

void AppMsg_device_add::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.device_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_device_add::CopyFrom(const AppMsg_device_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.device_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_device_add::IsInitialized() const {
  return true;
}

void AppMsg_device_add::InternalSwap(AppMsg_device_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  netmask_.Swap(&other->netmask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_device_add::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_server_add::InitAsDefaultInstance() {
}
class AppMsg_server_add::_Internal {
 public:
};

AppMsg_server_add::AppMsg_server_add()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.server_add)
}
AppMsg_server_add::AppMsg_server_add(const AppMsg_server_add& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.server_add)
}

void AppMsg_server_add::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_server_add_AppMsg_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

AppMsg_server_add::~AppMsg_server_add() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.server_add)
  SharedDtor();
}

void AppMsg_server_add::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_server_add::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_server_add& AppMsg_server_add::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_server_add_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_server_add::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.server_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_server_add::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "proto.AppMsg.server_add.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_server_add::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.server_add)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.server_add.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.server_add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.server_add)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_server_add::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.server_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.server_add.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.server_add)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_server_add::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.server_add)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.server_add.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.server_add)
  return target;
}

size_t AppMsg_server_add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.server_add)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_server_add::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.server_add)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_server_add* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_server_add>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.server_add)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.server_add)
    MergeFrom(*source);
  }
}

void AppMsg_server_add::MergeFrom(const AppMsg_server_add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.server_add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void AppMsg_server_add::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.server_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_server_add::CopyFrom(const AppMsg_server_add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.server_add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_server_add::IsInitialized() const {
  return true;
}

void AppMsg_server_add::InternalSwap(AppMsg_server_add* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_server_add::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_platform_id::InitAsDefaultInstance() {
}
class AppMsg_platform_id::_Internal {
 public:
};

AppMsg_platform_id::AppMsg_platform_id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.platform_id)
}
AppMsg_platform_id::AppMsg_platform_id(const AppMsg_platform_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.platform_id)
}

void AppMsg_platform_id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_platform_id_AppMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppMsg_platform_id::~AppMsg_platform_id() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.platform_id)
  SharedDtor();
}

void AppMsg_platform_id::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_platform_id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_platform_id& AppMsg_platform_id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_platform_id_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_platform_id::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.platform_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_platform_id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "proto.AppMsg.platform_id.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_platform_id::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.platform_id)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.platform_id.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.platform_id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.platform_id)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_platform_id::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.platform_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.platform_id.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.platform_id)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_platform_id::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.platform_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.platform_id.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.platform_id)
  return target;
}

size_t AppMsg_platform_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.platform_id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_platform_id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.platform_id)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_platform_id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_platform_id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.platform_id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.platform_id)
    MergeFrom(*source);
  }
}

void AppMsg_platform_id::MergeFrom(const AppMsg_platform_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.platform_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AppMsg_platform_id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.platform_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_platform_id::CopyFrom(const AppMsg_platform_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.platform_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_platform_id::IsInitialized() const {
  return true;
}

void AppMsg_platform_id::InternalSwap(AppMsg_platform_id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_platform_id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_station_id::InitAsDefaultInstance() {
}
class AppMsg_station_id::_Internal {
 public:
};

AppMsg_station_id::AppMsg_station_id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.station_id)
}
AppMsg_station_id::AppMsg_station_id(const AppMsg_station_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.station_id)
}

void AppMsg_station_id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_station_id_AppMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppMsg_station_id::~AppMsg_station_id() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.station_id)
  SharedDtor();
}

void AppMsg_station_id::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_station_id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_station_id& AppMsg_station_id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_station_id_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_station_id::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.station_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_station_id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "proto.AppMsg.station_id.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_station_id::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.station_id)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.station_id.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.station_id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.station_id)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_station_id::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.station_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.station_id.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.station_id)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_station_id::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.station_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.station_id.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.station_id)
  return target;
}

size_t AppMsg_station_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.station_id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_station_id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.station_id)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_station_id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_station_id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.station_id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.station_id)
    MergeFrom(*source);
  }
}

void AppMsg_station_id::MergeFrom(const AppMsg_station_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.station_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AppMsg_station_id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.station_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_station_id::CopyFrom(const AppMsg_station_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.station_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_station_id::IsInitialized() const {
  return true;
}

void AppMsg_station_id::InternalSwap(AppMsg_station_id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_station_id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_turnout_id::InitAsDefaultInstance() {
}
class AppMsg_turnout_id::_Internal {
 public:
};

AppMsg_turnout_id::AppMsg_turnout_id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.turnout_id)
}
AppMsg_turnout_id::AppMsg_turnout_id(const AppMsg_turnout_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.turnout_id)
}

void AppMsg_turnout_id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_turnout_id_AppMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppMsg_turnout_id::~AppMsg_turnout_id() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.turnout_id)
  SharedDtor();
}

void AppMsg_turnout_id::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_turnout_id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_turnout_id& AppMsg_turnout_id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_turnout_id_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_turnout_id::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.turnout_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_turnout_id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "proto.AppMsg.turnout_id.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_turnout_id::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.turnout_id)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.turnout_id.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.turnout_id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.turnout_id)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_turnout_id::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.turnout_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.turnout_id.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.turnout_id)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_turnout_id::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.turnout_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.turnout_id.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.turnout_id)
  return target;
}

size_t AppMsg_turnout_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.turnout_id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_turnout_id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.turnout_id)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_turnout_id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_turnout_id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.turnout_id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.turnout_id)
    MergeFrom(*source);
  }
}

void AppMsg_turnout_id::MergeFrom(const AppMsg_turnout_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.turnout_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AppMsg_turnout_id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.turnout_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_turnout_id::CopyFrom(const AppMsg_turnout_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.turnout_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_turnout_id::IsInitialized() const {
  return true;
}

void AppMsg_turnout_id::InternalSwap(AppMsg_turnout_id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_turnout_id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_item_id::InitAsDefaultInstance() {
}
class AppMsg_item_id::_Internal {
 public:
};

AppMsg_item_id::AppMsg_item_id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.item_id)
}
AppMsg_item_id::AppMsg_item_id(const AppMsg_item_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.item_id)
}

void AppMsg_item_id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_item_id_AppMsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppMsg_item_id::~AppMsg_item_id() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.item_id)
  SharedDtor();
}

void AppMsg_item_id::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppMsg_item_id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_item_id& AppMsg_item_id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_item_id_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_item_id::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.item_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_item_id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "proto.AppMsg.item_id.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_item_id::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.item_id)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "proto.AppMsg.item_id.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.item_id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.item_id)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_item_id::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.item_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.item_id.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.item_id)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_item_id::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.item_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.AppMsg.item_id.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.item_id)
  return target;
}

size_t AppMsg_item_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.item_id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_item_id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.item_id)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_item_id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_item_id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.item_id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.item_id)
    MergeFrom(*source);
  }
}

void AppMsg_item_id::MergeFrom(const AppMsg_item_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.item_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void AppMsg_item_id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.item_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_item_id::CopyFrom(const AppMsg_item_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.item_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_item_id::IsInitialized() const {
  return true;
}

void AppMsg_item_id::InternalSwap(AppMsg_item_id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_item_id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_sample_frequency::InitAsDefaultInstance() {
}
class AppMsg_sample_frequency::_Internal {
 public:
};

AppMsg_sample_frequency::AppMsg_sample_frequency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.sample_frequency)
}
AppMsg_sample_frequency::AppMsg_sample_frequency(const AppMsg_sample_frequency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frequency_ = from.frequency_;
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.sample_frequency)
}

void AppMsg_sample_frequency::SharedCtor() {
  frequency_ = 0u;
}

AppMsg_sample_frequency::~AppMsg_sample_frequency() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.sample_frequency)
  SharedDtor();
}

void AppMsg_sample_frequency::SharedDtor() {
}

void AppMsg_sample_frequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_sample_frequency& AppMsg_sample_frequency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_sample_frequency_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_sample_frequency::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.sample_frequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frequency_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_sample_frequency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_sample_frequency::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.sample_frequency)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frequency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.sample_frequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.sample_frequency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_sample_frequency::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.sample_frequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->frequency() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->frequency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.sample_frequency)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_sample_frequency::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.sample_frequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->frequency() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->frequency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.sample_frequency)
  return target;
}

size_t AppMsg_sample_frequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.sample_frequency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->frequency());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_sample_frequency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.sample_frequency)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_sample_frequency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_sample_frequency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.sample_frequency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.sample_frequency)
    MergeFrom(*source);
  }
}

void AppMsg_sample_frequency::MergeFrom(const AppMsg_sample_frequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.sample_frequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void AppMsg_sample_frequency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.sample_frequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_sample_frequency::CopyFrom(const AppMsg_sample_frequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.sample_frequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_sample_frequency::IsInitialized() const {
  return true;
}

void AppMsg_sample_frequency::InternalSwap(AppMsg_sample_frequency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frequency_, other->frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_sample_frequency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_abnormal_param::InitAsDefaultInstance() {
}
class AppMsg_abnormal_param::_Internal {
 public:
};

AppMsg_abnormal_param::AppMsg_abnormal_param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.abnormal_param)
}
AppMsg_abnormal_param::AppMsg_abnormal_param(const AppMsg_abnormal_param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&level_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.abnormal_param)
}

void AppMsg_abnormal_param::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&level_)) + sizeof(duration_));
}

AppMsg_abnormal_param::~AppMsg_abnormal_param() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.abnormal_param)
  SharedDtor();
}

void AppMsg_abnormal_param::SharedDtor() {
}

void AppMsg_abnormal_param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_abnormal_param& AppMsg_abnormal_param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_abnormal_param_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_abnormal_param::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.abnormal_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&level_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_abnormal_param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_abnormal_param::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.abnormal_param)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.abnormal_param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.abnormal_param)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_abnormal_param::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.abnormal_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.abnormal_param)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_abnormal_param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.abnormal_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.abnormal_param)
  return target;
}

size_t AppMsg_abnormal_param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.abnormal_param)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_abnormal_param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.abnormal_param)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_abnormal_param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_abnormal_param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.abnormal_param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.abnormal_param)
    MergeFrom(*source);
  }
}

void AppMsg_abnormal_param::MergeFrom(const AppMsg_abnormal_param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.abnormal_param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void AppMsg_abnormal_param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.abnormal_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_abnormal_param::CopyFrom(const AppMsg_abnormal_param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.abnormal_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_abnormal_param::IsInitialized() const {
  return true;
}

void AppMsg_abnormal_param::InternalSwap(AppMsg_abnormal_param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_abnormal_param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_pass_param::InitAsDefaultInstance() {
}
class AppMsg_pass_param::_Internal {
 public:
};

AppMsg_pass_param::AppMsg_pass_param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.pass_param)
}
AppMsg_pass_param::AppMsg_pass_param(const AppMsg_pass_param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.pass_param)
}

void AppMsg_pass_param::SharedCtor() {
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(duration_));
}

AppMsg_pass_param::~AppMsg_pass_param() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.pass_param)
  SharedDtor();
}

void AppMsg_pass_param::SharedDtor() {
}

void AppMsg_pass_param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_pass_param& AppMsg_pass_param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_pass_param_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_pass_param::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.pass_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_pass_param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_pass_param::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.pass_param)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 threshold = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.pass_param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.pass_param)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_pass_param::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.pass_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 threshold = 1;
  if (this->threshold() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->threshold(), output);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.pass_param)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_pass_param::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.pass_param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 threshold = 1;
  if (this->threshold() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->threshold(), target);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.pass_param)
  return target;
}

size_t AppMsg_pass_param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.pass_param)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 threshold = 1;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->threshold());
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_pass_param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.pass_param)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_pass_param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_pass_param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.pass_param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.pass_param)
    MergeFrom(*source);
  }
}

void AppMsg_pass_param::MergeFrom(const AppMsg_pass_param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.pass_param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void AppMsg_pass_param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.pass_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_pass_param::CopyFrom(const AppMsg_pass_param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.pass_param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_pass_param::IsInitialized() const {
  return true;
}

void AppMsg_pass_param::InternalSwap(AppMsg_pass_param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(threshold_, other->threshold_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_pass_param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_sample_card_num::InitAsDefaultInstance() {
}
class AppMsg_sample_card_num::_Internal {
 public:
};

AppMsg_sample_card_num::AppMsg_sample_card_num()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.sample_card_num)
}
AppMsg_sample_card_num::AppMsg_sample_card_num(const AppMsg_sample_card_num& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.sample_card_num)
}

void AppMsg_sample_card_num::SharedCtor() {
  num_ = 0u;
}

AppMsg_sample_card_num::~AppMsg_sample_card_num() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.sample_card_num)
  SharedDtor();
}

void AppMsg_sample_card_num::SharedDtor() {
}

void AppMsg_sample_card_num::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_sample_card_num& AppMsg_sample_card_num::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_sample_card_num_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_sample_card_num::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.sample_card_num)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_sample_card_num::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_sample_card_num::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.sample_card_num)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.sample_card_num)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.sample_card_num)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_sample_card_num::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.sample_card_num)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num = 1;
  if (this->num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.sample_card_num)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_sample_card_num::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.sample_card_num)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num = 1;
  if (this->num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.sample_card_num)
  return target;
}

size_t AppMsg_sample_card_num::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.sample_card_num)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num = 1;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_sample_card_num::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.sample_card_num)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_sample_card_num* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_sample_card_num>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.sample_card_num)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.sample_card_num)
    MergeFrom(*source);
  }
}

void AppMsg_sample_card_num::MergeFrom(const AppMsg_sample_card_num& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.sample_card_num)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num() != 0) {
    set_num(from.num());
  }
}

void AppMsg_sample_card_num::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.sample_card_num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_sample_card_num::CopyFrom(const AppMsg_sample_card_num& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.sample_card_num)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_sample_card_num::IsInitialized() const {
  return true;
}

void AppMsg_sample_card_num::InternalSwap(AppMsg_sample_card_num* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_sample_card_num::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_file_cache_enable::InitAsDefaultInstance() {
}
class AppMsg_file_cache_enable::_Internal {
 public:
};

AppMsg_file_cache_enable::AppMsg_file_cache_enable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.file_cache_enable)
}
AppMsg_file_cache_enable::AppMsg_file_cache_enable(const AppMsg_file_cache_enable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.file_cache_enable)
}

void AppMsg_file_cache_enable::SharedCtor() {
  enable_ = false;
}

AppMsg_file_cache_enable::~AppMsg_file_cache_enable() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.file_cache_enable)
  SharedDtor();
}

void AppMsg_file_cache_enable::SharedDtor() {
}

void AppMsg_file_cache_enable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_file_cache_enable& AppMsg_file_cache_enable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_file_cache_enable_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_file_cache_enable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.file_cache_enable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_file_cache_enable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_file_cache_enable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.file_cache_enable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.file_cache_enable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.file_cache_enable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_file_cache_enable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.file_cache_enable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.file_cache_enable)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_file_cache_enable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.file_cache_enable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.file_cache_enable)
  return target;
}

size_t AppMsg_file_cache_enable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.file_cache_enable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_file_cache_enable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.file_cache_enable)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_file_cache_enable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_file_cache_enable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.file_cache_enable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.file_cache_enable)
    MergeFrom(*source);
  }
}

void AppMsg_file_cache_enable::MergeFrom(const AppMsg_file_cache_enable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.file_cache_enable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
}

void AppMsg_file_cache_enable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.file_cache_enable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_file_cache_enable::CopyFrom(const AppMsg_file_cache_enable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.file_cache_enable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_file_cache_enable::IsInitialized() const {
  return true;
}

void AppMsg_file_cache_enable::InternalSwap(AppMsg_file_cache_enable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_file_cache_enable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_adc_data::InitAsDefaultInstance() {
  ::proto::_AppMsg_adc_data_default_instance_._instance.get_mutable()->platform_id_ = const_cast< ::proto::AppMsg_platform_id*>(
      ::proto::AppMsg_platform_id::internal_default_instance());
  ::proto::_AppMsg_adc_data_default_instance_._instance.get_mutable()->station_id_ = const_cast< ::proto::AppMsg_station_id*>(
      ::proto::AppMsg_station_id::internal_default_instance());
  ::proto::_AppMsg_adc_data_default_instance_._instance.get_mutable()->turnout_id_ = const_cast< ::proto::AppMsg_turnout_id*>(
      ::proto::AppMsg_turnout_id::internal_default_instance());
  ::proto::_AppMsg_adc_data_default_instance_._instance.get_mutable()->item_id_ = const_cast< ::proto::AppMsg_item_id*>(
      ::proto::AppMsg_item_id::internal_default_instance());
}
class AppMsg_adc_data::_Internal {
 public:
  static const ::proto::AppMsg_platform_id& platform_id(const AppMsg_adc_data* msg);
  static const ::proto::AppMsg_station_id& station_id(const AppMsg_adc_data* msg);
  static const ::proto::AppMsg_turnout_id& turnout_id(const AppMsg_adc_data* msg);
  static const ::proto::AppMsg_item_id& item_id(const AppMsg_adc_data* msg);
};

const ::proto::AppMsg_platform_id&
AppMsg_adc_data::_Internal::platform_id(const AppMsg_adc_data* msg) {
  return *msg->platform_id_;
}
const ::proto::AppMsg_station_id&
AppMsg_adc_data::_Internal::station_id(const AppMsg_adc_data* msg) {
  return *msg->station_id_;
}
const ::proto::AppMsg_turnout_id&
AppMsg_adc_data::_Internal::turnout_id(const AppMsg_adc_data* msg) {
  return *msg->turnout_id_;
}
const ::proto::AppMsg_item_id&
AppMsg_adc_data::_Internal::item_id(const AppMsg_adc_data* msg) {
  return *msg->item_id_;
}
AppMsg_adc_data::AppMsg_adc_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.adc_data)
}
AppMsg_adc_data::AppMsg_adc_data(const AppMsg_adc_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_),
      channel_info_(from.channel_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_platform_id()) {
    platform_id_ = new ::proto::AppMsg_platform_id(*from.platform_id_);
  } else {
    platform_id_ = nullptr;
  }
  if (from.has_station_id()) {
    station_id_ = new ::proto::AppMsg_station_id(*from.station_id_);
  } else {
    station_id_ = nullptr;
  }
  if (from.has_turnout_id()) {
    turnout_id_ = new ::proto::AppMsg_turnout_id(*from.turnout_id_);
  } else {
    turnout_id_ = nullptr;
  }
  if (from.has_item_id()) {
    item_id_ = new ::proto::AppMsg_item_id(*from.item_id_);
  } else {
    item_id_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_number_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sample_number_));
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.adc_data)
}

void AppMsg_adc_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_adc_data_AppMsg_2eproto.base);
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_number_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(sample_number_));
}

AppMsg_adc_data::~AppMsg_adc_data() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.adc_data)
  SharedDtor();
}

void AppMsg_adc_data::SharedDtor() {
  if (this != internal_default_instance()) delete platform_id_;
  if (this != internal_default_instance()) delete station_id_;
  if (this != internal_default_instance()) delete turnout_id_;
  if (this != internal_default_instance()) delete item_id_;
}

void AppMsg_adc_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_adc_data& AppMsg_adc_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_adc_data_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_adc_data::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.adc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  channel_info_.Clear();
  if (GetArenaNoVirtual() == nullptr && platform_id_ != nullptr) {
    delete platform_id_;
  }
  platform_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && station_id_ != nullptr) {
    delete station_id_;
  }
  station_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && turnout_id_ != nullptr) {
    delete turnout_id_;
  }
  turnout_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_id_ != nullptr) {
    delete item_id_;
  }
  item_id_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_number_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sample_number_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_adc_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_card_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_card_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sample_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sample_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sample_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_data(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .proto.AppMsg.channel_info channel_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_channel_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .proto.AppMsg.platform_id platform_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_platform_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.AppMsg.station_id station_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_station_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.AppMsg.turnout_id turnout_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_turnout_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.AppMsg.item_id item_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_item_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_adc_data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.adc_data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_card_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_card_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_frequency = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_number = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.AppMsg.channel_info channel_info = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_channel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AppMsg.platform_id platform_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_platform_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AppMsg.station_id station_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_station_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AppMsg.turnout_id turnout_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_turnout_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AppMsg.item_id item_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.adc_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.adc_data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_adc_data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.adc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // uint32 sample_card_num = 2;
  if (this->sample_card_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sample_card_num(), output);
  }

  // uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->sample_frequency(), output);
  }

  // uint32 sample_number = 4;
  if (this->sample_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->sample_number(), output);
  }

  // repeated bytes data = 5;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      5, this->data(i), output);
  }

  // repeated .proto.AppMsg.channel_info channel_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->channel_info(static_cast<int>(i)),
      output);
  }

  // .proto.AppMsg.platform_id platform_id = 7;
  if (this->has_platform_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::platform_id(this), output);
  }

  // .proto.AppMsg.station_id station_id = 8;
  if (this->has_station_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::station_id(this), output);
  }

  // .proto.AppMsg.turnout_id turnout_id = 9;
  if (this->has_turnout_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::turnout_id(this), output);
  }

  // .proto.AppMsg.item_id item_id = 10;
  if (this->has_item_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::item_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.adc_data)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_adc_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.adc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // uint32 sample_card_num = 2;
  if (this->sample_card_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->sample_card_num(), target);
  }

  // uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->sample_frequency(), target);
  }

  // uint32 sample_number = 4;
  if (this->sample_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->sample_number(), target);
  }

  // repeated bytes data = 5;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(5, this->data(i), target);
  }

  // repeated .proto.AppMsg.channel_info channel_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->channel_info(static_cast<int>(i)), target);
  }

  // .proto.AppMsg.platform_id platform_id = 7;
  if (this->has_platform_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::platform_id(this), target);
  }

  // .proto.AppMsg.station_id station_id = 8;
  if (this->has_station_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::station_id(this), target);
  }

  // .proto.AppMsg.turnout_id turnout_id = 9;
  if (this->has_turnout_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::turnout_id(this), target);
  }

  // .proto.AppMsg.item_id item_id = 10;
  if (this->has_item_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::item_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.adc_data)
  return target;
}

size_t AppMsg_adc_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.adc_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  // repeated .proto.AppMsg.channel_info channel_info = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->channel_info(static_cast<int>(i)));
    }
  }

  // .proto.AppMsg.platform_id platform_id = 7;
  if (this->has_platform_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *platform_id_);
  }

  // .proto.AppMsg.station_id station_id = 8;
  if (this->has_station_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *station_id_);
  }

  // .proto.AppMsg.turnout_id turnout_id = 9;
  if (this->has_turnout_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turnout_id_);
  }

  // .proto.AppMsg.item_id item_id = 10;
  if (this->has_item_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_id_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 sample_card_num = 2;
  if (this->sample_card_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sample_card_num());
  }

  // uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sample_frequency());
  }

  // uint32 sample_number = 4;
  if (this->sample_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sample_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_adc_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.adc_data)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_adc_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_adc_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.adc_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.adc_data)
    MergeFrom(*source);
  }
}

void AppMsg_adc_data::MergeFrom(const AppMsg_adc_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.adc_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  channel_info_.MergeFrom(from.channel_info_);
  if (from.has_platform_id()) {
    mutable_platform_id()->::proto::AppMsg_platform_id::MergeFrom(from.platform_id());
  }
  if (from.has_station_id()) {
    mutable_station_id()->::proto::AppMsg_station_id::MergeFrom(from.station_id());
  }
  if (from.has_turnout_id()) {
    mutable_turnout_id()->::proto::AppMsg_turnout_id::MergeFrom(from.turnout_id());
  }
  if (from.has_item_id()) {
    mutable_item_id()->::proto::AppMsg_item_id::MergeFrom(from.item_id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.sample_card_num() != 0) {
    set_sample_card_num(from.sample_card_num());
  }
  if (from.sample_frequency() != 0) {
    set_sample_frequency(from.sample_frequency());
  }
  if (from.sample_number() != 0) {
    set_sample_number(from.sample_number());
  }
}

void AppMsg_adc_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.adc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_adc_data::CopyFrom(const AppMsg_adc_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.adc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_adc_data::IsInitialized() const {
  return true;
}

void AppMsg_adc_data::InternalSwap(AppMsg_adc_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(CastToBase(&other->data_));
  CastToBase(&channel_info_)->InternalSwap(CastToBase(&other->channel_info_));
  swap(platform_id_, other->platform_id_);
  swap(station_id_, other->station_id_);
  swap(turnout_id_, other->turnout_id_);
  swap(item_id_, other->item_id_);
  swap(time_, other->time_);
  swap(sample_card_num_, other->sample_card_num_);
  swap(sample_frequency_, other->sample_frequency_);
  swap(sample_number_, other->sample_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_adc_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg_channel_info::InitAsDefaultInstance() {
  ::proto::_AppMsg_channel_info_default_instance_._instance.get_mutable()->abnormal_param_ = const_cast< ::proto::AppMsg_abnormal_param*>(
      ::proto::AppMsg_abnormal_param::internal_default_instance());
}
class AppMsg_channel_info::_Internal {
 public:
  static const ::proto::AppMsg_abnormal_param& abnormal_param(const AppMsg_channel_info* msg);
};

const ::proto::AppMsg_abnormal_param&
AppMsg_channel_info::_Internal::abnormal_param(const AppMsg_channel_info* msg) {
  return *msg->abnormal_param_;
}
AppMsg_channel_info::AppMsg_channel_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg.channel_info)
}
AppMsg_channel_info::AppMsg_channel_info(const AppMsg_channel_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_abnormal_param()) {
    abnormal_param_ = new ::proto::AppMsg_abnormal_param(*from.abnormal_param_);
  } else {
    abnormal_param_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_voltage_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fault_voltage_));
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg.channel_info)
}

void AppMsg_channel_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppMsg_channel_info_AppMsg_2eproto.base);
  ::memset(&abnormal_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_voltage_) -
      reinterpret_cast<char*>(&abnormal_param_)) + sizeof(fault_voltage_));
}

AppMsg_channel_info::~AppMsg_channel_info() {
  // @@protoc_insertion_point(destructor:proto.AppMsg.channel_info)
  SharedDtor();
}

void AppMsg_channel_info::SharedDtor() {
  if (this != internal_default_instance()) delete abnormal_param_;
}

void AppMsg_channel_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg_channel_info& AppMsg_channel_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_channel_info_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg_channel_info::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg.channel_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && abnormal_param_ != nullptr) {
    delete abnormal_param_;
  }
  abnormal_param_ = nullptr;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_voltage_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(fault_voltage_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg_channel_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset_zero = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset_max_vol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_max_vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset_max_vol_ad = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_max_vol_ad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fault_voltage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fault_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.AppMsg.abnormal_param abnormal_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_abnormal_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg_channel_info::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg.channel_info)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset_zero = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_zero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset_max_vol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_max_vol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset_max_vol_ad = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_max_vol_ad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fault_voltage = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fault_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AppMsg.abnormal_param abnormal_param = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_abnormal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg.channel_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg.channel_info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg_channel_info::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg.channel_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // uint32 offset_zero = 2;
  if (this->offset_zero() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->offset_zero(), output);
  }

  // uint32 offset_max_vol = 3;
  if (this->offset_max_vol() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->offset_max_vol(), output);
  }

  // uint32 offset_max_vol_ad = 4;
  if (this->offset_max_vol_ad() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->offset_max_vol_ad(), output);
  }

  // uint32 fault_voltage = 5;
  if (this->fault_voltage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->fault_voltage(), output);
  }

  // .proto.AppMsg.abnormal_param abnormal_param = 6;
  if (this->has_abnormal_param()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::abnormal_param(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg.channel_info)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg_channel_info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg.channel_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // uint32 offset_zero = 2;
  if (this->offset_zero() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset_zero(), target);
  }

  // uint32 offset_max_vol = 3;
  if (this->offset_max_vol() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset_max_vol(), target);
  }

  // uint32 offset_max_vol_ad = 4;
  if (this->offset_max_vol_ad() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset_max_vol_ad(), target);
  }

  // uint32 fault_voltage = 5;
  if (this->fault_voltage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->fault_voltage(), target);
  }

  // .proto.AppMsg.abnormal_param abnormal_param = 6;
  if (this->has_abnormal_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::abnormal_param(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg.channel_info)
  return target;
}

size_t AppMsg_channel_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg.channel_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.AppMsg.abnormal_param abnormal_param = 6;
  if (this->has_abnormal_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *abnormal_param_);
  }

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // uint32 offset_zero = 2;
  if (this->offset_zero() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offset_zero());
  }

  // uint32 offset_max_vol = 3;
  if (this->offset_max_vol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offset_max_vol());
  }

  // uint32 offset_max_vol_ad = 4;
  if (this->offset_max_vol_ad() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offset_max_vol_ad());
  }

  // uint32 fault_voltage = 5;
  if (this->fault_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->fault_voltage());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg_channel_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg.channel_info)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg_channel_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg_channel_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg.channel_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg.channel_info)
    MergeFrom(*source);
  }
}

void AppMsg_channel_info::MergeFrom(const AppMsg_channel_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg.channel_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_abnormal_param()) {
    mutable_abnormal_param()->::proto::AppMsg_abnormal_param::MergeFrom(from.abnormal_param());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.offset_zero() != 0) {
    set_offset_zero(from.offset_zero());
  }
  if (from.offset_max_vol() != 0) {
    set_offset_max_vol(from.offset_max_vol());
  }
  if (from.offset_max_vol_ad() != 0) {
    set_offset_max_vol_ad(from.offset_max_vol_ad());
  }
  if (from.fault_voltage() != 0) {
    set_fault_voltage(from.fault_voltage());
  }
}

void AppMsg_channel_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg.channel_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg_channel_info::CopyFrom(const AppMsg_channel_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg.channel_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg_channel_info::IsInitialized() const {
  return true;
}

void AppMsg_channel_info::InternalSwap(AppMsg_channel_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(abnormal_param_, other->abnormal_param_);
  swap(channel_, other->channel_);
  swap(offset_zero_, other->offset_zero_);
  swap(offset_max_vol_, other->offset_max_vol_);
  swap(offset_max_vol_ad_, other->offset_max_vol_ad_);
  swap(fault_voltage_, other->fault_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg_channel_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppMsg::InitAsDefaultInstance() {
}
class AppMsg::_Internal {
 public:
};

AppMsg::AppMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AppMsg)
}
AppMsg::AppMsg(const AppMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.AppMsg)
}

void AppMsg::SharedCtor() {
}

AppMsg::~AppMsg() {
  // @@protoc_insertion_point(destructor:proto.AppMsg)
  SharedDtor();
}

void AppMsg::SharedDtor() {
}

void AppMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppMsg& AppMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppMsg_AppMsg_2eproto.base);
  return *internal_default_instance();
}


void AppMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppMsg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AppMsg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AppMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AppMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppMsg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.AppMsg)
}

::PROTOBUF_NAMESPACE_ID::uint8* AppMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppMsg)
  return target;
}

size_t AppMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AppMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AppMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AppMsg)
    MergeFrom(*source);
  }
}

void AppMsg::MergeFrom(const AppMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppMsg::CopyFrom(const AppMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppMsg::IsInitialized() const {
  return true;
}

void AppMsg::InternalSwap(AppMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::AppMsg_device_add* Arena::CreateMaybeMessage< ::proto::AppMsg_device_add >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_device_add >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_server_add* Arena::CreateMaybeMessage< ::proto::AppMsg_server_add >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_server_add >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_platform_id* Arena::CreateMaybeMessage< ::proto::AppMsg_platform_id >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_platform_id >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_station_id* Arena::CreateMaybeMessage< ::proto::AppMsg_station_id >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_station_id >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_turnout_id* Arena::CreateMaybeMessage< ::proto::AppMsg_turnout_id >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_turnout_id >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_item_id* Arena::CreateMaybeMessage< ::proto::AppMsg_item_id >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_item_id >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_sample_frequency* Arena::CreateMaybeMessage< ::proto::AppMsg_sample_frequency >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_sample_frequency >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_abnormal_param* Arena::CreateMaybeMessage< ::proto::AppMsg_abnormal_param >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_abnormal_param >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_pass_param* Arena::CreateMaybeMessage< ::proto::AppMsg_pass_param >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_pass_param >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_sample_card_num* Arena::CreateMaybeMessage< ::proto::AppMsg_sample_card_num >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_sample_card_num >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_file_cache_enable* Arena::CreateMaybeMessage< ::proto::AppMsg_file_cache_enable >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_file_cache_enable >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_adc_data* Arena::CreateMaybeMessage< ::proto::AppMsg_adc_data >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_adc_data >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg_channel_info* Arena::CreateMaybeMessage< ::proto::AppMsg_channel_info >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg_channel_info >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppMsg* Arena::CreateMaybeMessage< ::proto::AppMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::AppMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
